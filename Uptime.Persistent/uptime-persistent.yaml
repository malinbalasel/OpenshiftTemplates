apiVersion: v1
kind: Template
message: "The webhook secret is ${WEBHOOK_SECRET}, the MongoDB password is ${MONGODB_PASSWORD}"
metadata:
  annotations:
    description: A ready to use monitoring solution
    iconClass: icon-nodejs
    tags: instant-app, nodejs, uptime, kermit
  name: uptime
objects:
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
  -
    apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        git:
          ref: master
          uri: "${SOURCE_REPOSITORY_URL}"
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: "nodejs:4"
            namespace: openshift
        type: Source
      triggers:
        -
          generic:
            secret: "${WEBHOOK_SECRET}"
          type: Generic
        -
          github:
            secret: "${WEBHOOK_SECRET}"
          type: GitHub
        -
          imageChange: {}
          type: ImageChange
        -
          type: ConfigChange
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
          - env:
              -
                name: NODE_ENV
                value: development
            image: ${APPLICATION_NAME}
            name: ${APPLICATION_NAME}
            imagePullPolicy: Always
            ports:
              -
                containerPort: 8080
                protocol: TCP
            volumeMounts:
              -
                name: config
                mountPath: /opt/app-root/src/config
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          volumes:
            -
              name: config
              configMap:
                name: ${APPLICATION_NAME}-config
                items:
                  -
                    key: config
                    path: development.yaml
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:latest
  -
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: ~
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        -
          name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  -
    apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${APPLICATION_NAME}
        weight: 100
  -
    apiVersion: v1
    data:
      config: |
        url: 'http://${APPLICATION_NAME}-${PROJECT_NAME}.kermit.itn.intraorange'

        server:
          port: 8080

        mongodb:
          server:   ${APPLICATION_NAME}-mongodb
          database: ${MONGODB_DATABASE}
          user:     ${MONGODB_USER}
          password: ${MONGODB_PASSWORD}
          connectionString:       # alternative to setting server, database, user and password separately

        monitor:
          name:                   origin
          apiUrl:                 'http://${APPLICATION_NAME}-${PROJECT_NAME}.kermit.itn.intraorange/api' # must be accessible without a proxy
          pollingInterval:        10000      # ten seconds
          timeout:                5000       # five seconds
          userAgent:              NodeUptime/3.0 (https://github.com/fzaninotto/uptime)

        analyzer:
          updateInterval:         60000      # one minute
          qosAggregationInterval: 600000     # ten minutes
          pingHistory:            8035200000 # three months

        autoStartMonitor: true

        plugins:
          - ./plugins/console
          - ./plugins/patternMatcher
          - ./plugins/httpOptions
          # - ./plugins/email
          # - ./plugins/basicAuth

        webPageTest:
          server: 'http://www.webpagetest.org'
          key:
          testOptions:

    kind: ConfigMap
    metadata:
      creationTimestamp: ~
      name: ${APPLICATION_NAME}-config
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: "${APPLICATION_NAME}-mongodb"
      labels:
        app: ${APPLICATION_NAME}-mongodb
    spec:
      ports:
        -
          name: mongo
          port: 27017
          protocol: TCP
          targetPort: 27017
      selector:
        name: ${APPLICATION_NAME}-mongodb
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: ~
  -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: "${APPLICATION_NAME}-mongodb-pvclaim"
      labels:
        app: ${APPLICATION_NAME}-mongodb
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: ~
      name: "${APPLICATION_NAME}-mongodb"
      labels:
        app: ${APPLICATION_NAME}-mongodb
    spec:
      replicas: 1
      selector:
        name: "${APPLICATION_NAME}-mongodb"
      strategy:
        type: Recreate
      template:
        metadata:
          creationTimestamp: ~
          labels:
            name: "${APPLICATION_NAME}-mongodb"
            app: ${APPLICATION_NAME}-mongodb
        spec:
          containers:
            -
              capabilities: {}
              env:
                -
                  name: MONGODB_USER
                  value: "${MONGODB_USER}"
                -
                  name: MONGODB_PASSWORD
                  value: "${MONGODB_PASSWORD}"
                -
                  name: MONGODB_DATABASE
                  value: "${MONGODB_DATABASE}"
                -
                  name: MONGODB_ADMIN_PASSWORD
                  value: "${MONGODB_ADMIN_PASSWORD}"
              image: openshift/mongodb-24-centos7
              name: ${APPLICATION_NAME}-mongodb
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 30
                name: mongodb
                ports:
                  -
                    containerPort: 27017
                    protocol: TCP
                readinessProbe:
                  exec:
                    command:
                      - /bin/sh
                      - "-i"
                      - "-c"
                      - "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                  initialDelaySeconds: 3
                  timeoutSeconds: 1
                resources:
                  limits:
                    memory: 512Mi
                securityContext:
                  capabilities: {}
                  privileged: false
                tcpSocket:
                  port: 27017
                terminationMessagePath: /dev/termination-log
                timeoutSeconds: 1
                volumeMounts:
                  -
                    mountPath: /var/lib/mongodb/data
                    name: "${APPLICATION_NAME}-mongodb-data"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            -
              name: "${APPLICATION_NAME}-mongodb-data"
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-mongodb-pvclaim"
      triggers:
        -
          type: ConfigChange
parameters:
  -
    description: "The name assigned to all of the objects defined in this template."
    displayName: APPLICATION_NAME
    name: APPLICATION_NAME
    required: true
    value: uptime
  -
    description: "The name of your project"
    displayName: PROJECT_NAME
    name: PROJECT_NAME
    required: true
    value: awesome_project
  -
    description: "The URL of the repository with your application source code."
    displayName: "Git Repository URL"
    name: SOURCE_REPOSITORY_URL
    value: "https://github.com/fzaninotto/uptime.git"
  -
    description: "A secret string used to configure the Git webhook."
    displayName: "Git Webhook Secret"
    from: "[a-zA-Z0-9]{40}"
    generate: expression
    name: WEBHOOK_SECRET
  -
    description: "The MongoDB user"
    displayName: "MongoDB User"
    name: MONGODB_USER
    required: true
    value: mongouser
  -
    description: "Name of the MongoDB database accessed"
    displayName: "MongoDB Database name"
    name: MONGODB_DATABASE
    required: true
    value: uptime
  -
    description: "The MongoDB password"
    displayName: "MongoDB password"
    from: "[a-zA-Z0-9]{15}"
    generate: expression
    name: MONGODB_PASSWORD
    required: true
  -
    description: "Password for the database admin user."
    displayName: "MongoDB Admin Password"
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: MONGODB_ADMIN_PASSWORD
    required: true
